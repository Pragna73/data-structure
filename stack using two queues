#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
struct QueueNode {
    int data;
    struct QueueNode* next;
};
struct Queue {
    struct QueueNode *front, *rear;
};
struct QueueNode* createQueueNode(int data) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
struct Queue* createQueue() {
    struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->front = queue->rear = NULL;
    return queue;
}
void enqueue(struct Queue* queue, int data) {
    struct QueueNode* newNode = createQueueNode(data);
    if (queue->rear == NULL) {
        queue->front = queue->rear = newNode;
        return;
    }
    queue->rear->next = newNode;
    queue->rear = newNode;
}

// Function to remove an element from the queue
int dequeue(struct Queue* queue) {
    if (queue->front == NULL) {
        return -1;
    }
    struct QueueNode* temp = queue->front;
    int data = temp->data;
    queue->front = queue->front->next;
    if (queue->front == NULL) {
        queue->rear = NULL;
    }
    free(temp);
    return data;
}
bool isEmpty(struct Queue* queue) {
    return queue->front == NULL;
}
struct Stack {
    struct Queue* queue1;
    struct Queue* queue2;
};
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->queue1 = createQueue();
    stack->queue2 = createQueue();
    return stack;
}
void push(struct Stack* stack, int data) {
    enqueue(stack->queue1, data);
}
int pop(struct Stack* stack) {
    if (isEmpty(stack->queue1)) {
        printf("Stack Underflow\n");
        return -1;
    }
    while (stack->queue1->front->next != NULL) {
        enqueue(stack->queue2, dequeue(stack->queue1));
    }
    int popped = dequeue(stack->queue1);
    struct Queue* temp = stack->queue1;
    stack->queue1 = stack->queue2;
    stack->queue2 = temp;
    return popped;
}
int top(struct Stack* stack) {
    if (isEmpty(stack->queue1)) {
        printf("Stack is empty\n");
        return -1;
    }
    while (stack->queue1->front->next != NULL) {
        enqueue(stack->queue2, dequeue(stack->queue1));
    }
    int topElement = stack->queue1->front->data;
    enqueue(stack->queue2, dequeue(stack->queue1));
    struct Queue* temp = stack->queue1;
    stack->queue1 = stack->queue2;
    stack->queue2 = temp;
    return topElement;
}
bool isStackEmpty(struct Stack* stack) {
    return isEmpty(stack->queue1);
}
int main() {
    struct Stack* stack = createStack();
    push(stack, 10);
    push(stack, 20);
    push(stack, 30);
    printf("Top element is %d\n", top(stack));
    printf("Popped element is %d\n", pop(stack));
    printf("Top element is %d\n", top(stack));
    printf("Popped element is %d\n", pop(stack));
    printf("Popped element is %d\n", pop(stack));
    printf("Popped element is %d\n", pop(stack));  
    return 0;
}
