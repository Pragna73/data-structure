#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
struct Node* insertNode(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else {
        root->right = insertNode(root->right, data);
    }
    return root;
}
void findKthSmallestUtil(struct Node* root, int k, int* count, int* result) {
    if (root == NULL || *count >= k) {
        return;
    }
    findKthSmallestUtil(root->left, k, count, result);
    (*count)++;
    if (*count == k) {
        *result = root->data;
        return;
    }
    findKthSmallestUtil(root->right, k, count, result);
}
int findKthSmallest(struct Node* root, int k) {
    int count = 0;
    int result = -1; 
    findKthSmallestUtil(root, k, &count, &result);
    return result;
}
void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}
int main() {
    struct Node* root = NULL;
    root = insertNode(root, 50);
    insertNode(root, 30);
    insertNode(root, 70);
    insertNode(root, 20);
    insertNode(root, 40);
    insertNode(root, 60);
    insertNode(root, 80);
    printf("In-order traversal: ");
    inorderTraversal(root);
    printf("\n");
    int k = 3;
    int kthSmallest = findKthSmallest(root, k);
    if (kthSmallest != -1) {
        printf("The %d-th smallest element in the BST is: %d\n", k, kthSmallest);
    } else {
        printf("The %d-th smallest element does not exist.\n", k);
    }
    return 0;
}
