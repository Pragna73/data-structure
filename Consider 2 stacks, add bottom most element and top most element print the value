#include <stdio.h>
#include <stdlib.h>
typedef struct Stack {
    int *array;
    int top;
    int capacity;
} Stack;
Stack* createStack(int capacity) {
    Stack* stack = (Stack*) malloc(sizeof(Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (int*) malloc(stack->capacity * sizeof(int));
    return stack;
}
int isEmpty(Stack* stack) {
    return stack->top == -1;
}
int isFull(Stack* stack) {
    return stack->top == stack->capacity - 1;
}
void push(Stack* stack, int item) {
    if (isFull(stack))
        return;
    stack->array[++stack->top] = item;
}
int pop(Stack* stack) {
    if (isEmpty(stack))
        return -1;
    return stack->array[stack->top--];
}
int getBottomElement(Stack* stack) {
    if (isEmpty(stack))
        return -1;
    return stack->array[0];
}
int getTopElement(Stack* stack) {
    if (isEmpty(stack))
        return -1;
    return stack->array[stack->top];
}
int main() {
    int n1, n2;
    printf("Enter the number of elements in the first stack: ");
    scanf("%d", &n1);
    Stack* stack1 = createStack(n1);
    printf("Enter the elements of the first stack:\n");
    for (int i = 0; i < n1; i++) {
        int element;
        scanf("%d", &element);
        push(stack1, element);
    }
    printf("Enter the number of elements in the second stack: ");
    scanf("%d", &n2);
    Stack* stack2 = createStack(n2);
    printf("Enter the elements of the second stack:\n");
    for (int i = 0; i < n2; i++) {
        int element;
        scanf("%d", &element);
        push(stack2, element);
    }
    int bottomElement = getBottomElement(stack1);
    int topElement = getTopElement(stack2);
    int sum = bottomElement + topElement;
    printf("Sum of bottom-most element of first stack and top-most element of second stack: %d\n", sum);
    free(stack1->array);
    free(stack1);
    free(stack2->array);
    free(stack2);
    return 0;
}
